openapi: 3.0.0
info:
  title: Elefanteca
  version: 0.0.0
paths:
  /api/auth/login/jwt:
    post:
      tags:
        - auth
      description: 'Login com JWT'
      operationId: 7aa2ba8401e13c0f62d8ccaeb57b6b98
      requestBody:
        content:
          application/json;charset=UTF-8:
            schema:
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  example: admin@desativemeemprod.com
                password:
                  type: string
                  example: asdf
              type: object
      responses:
        2XX:
          description: OK
  '/api/authors/{id}':
    get:
      tags:
        - autor
      description: 'Exibição de 1 autor'
      operationId: c14c739d68f46a33acfd0694a12c27dc
      parameters:
        -
          name: id
          in: path
          description: 'Id autor'
          required: true
          schema:
            type: integer
            example: 1
      responses:
        2XX:
          description: OK
      security:
        -
          JWT: []
    put:
      tags:
        - autor
      description: 'Edição de autor'
      operationId: 2a9f154a4061c0d3257520aba98221a5
      parameters:
        -
          name: id
          in: path
          description: 'Id autor'
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        content:
          application/json;charset=UTF-8:
            schema:
              required:
                - name
              properties:
                name:
                  type: string
                  example: 'Edgar Allan Poe'
              type: object
      responses:
        2XX:
          description: OK
      security:
        -
          JWT: []
    delete:
      tags:
        - autor
      description: 'Deleção de autor'
      operationId: c04021713290d77b82e912ec58f94c36
      parameters:
        -
          name: id
          in: path
          description: 'Id autor'
          required: true
          schema:
            type: integer
            example: 1
      responses:
        2XX:
          description: OK
      security:
        -
          JWT: []
  /api/authors:
    get:
      tags:
        - autor
      description: 'Listagem de autores'
      operationId: 0c71439e213e1b284fc37995d74bca2b
      parameters:
        -
          name: name
          in: query
          description: 'Nome parcial do autor'
          schema:
            type: string
            example: Allan
        -
          name: page
          in: query
          description: Paginação
          schema:
            type: integer
            example: 1
      responses:
        2XX:
          description: OK
      security:
        -
          JWT: []
    post:
      tags:
        - autor
      description: 'Cadastro de autor'
      operationId: 291d8539d3b5490d46fe9f2ebd84c64c
      requestBody:
        content:
          application/json;charset=UTF-8:
            schema:
              required:
                - name
              properties:
                name:
                  type: string
                  example: 'Edgar Allan Poe'
              type: object
      responses:
        2XX:
          description: OK
      security:
        -
          JWT: []
  '/api/books/{id}':
    get:
      tags:
        - livro
      description: 'Exibição de 1 livro'
      operationId: 2fdd668eb661591758aff4c56ca9b66a
      parameters:
        -
          name: id
          in: path
          description: 'Id livro'
          required: true
          schema:
            type: integer
            example: 1
      responses:
        2XX:
          description: OK
      security:
        -
          JWT: []
    put:
      tags:
        - livro
      description: 'Edição de livro'
      operationId: f5ca658c501a803d68655af0365e3802
      parameters:
        -
          name: id
          in: path
          description: 'Id livro'
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        content:
          application/json;charset=UTF-8:
            schema:
              required:
                - title
                - author_id
                - amount
              properties:
                title:
                  type: string
                  example: 'Coração delator'
                author_id:
                  type: integer
                  example: 1
                amount:
                  type: integer
                  example: 3
              type: object
      responses:
        2XX:
          description: OK
      security:
        -
          JWT: []
    delete:
      tags:
        - livro
      description: 'Deleção de livro'
      operationId: 1a9c26667c32b8ed5e5770d7a1cc9d5c
      parameters:
        -
          name: id
          in: path
          description: 'Id livro'
          required: true
          schema:
            type: integer
            example: 1
      responses:
        2XX:
          description: OK
      security:
        -
          JWT: []
  /api/books:
    get:
      tags:
        - livro
      description: 'Listagem de livros'
      operationId: a9d13283dfab262e97af3c914d51b7a8
      parameters:
        -
          name: title
          in: query
          description: 'Título parcial do livro'
          schema:
            type: string
            example: Allan
        -
          name: page
          in: query
          description: Paginação
          schema:
            type: integer
            example: 1
      responses:
        2XX:
          description: OK
      security:
        -
          JWT: []
    post:
      tags:
        - livro
      description: 'Cadastro de livro'
      operationId: 47047e95a700b3271b697e57d0965191
      requestBody:
        content:
          application/json;charset=UTF-8:
            schema:
              required:
                - title
                - author_id
                - amount
              properties:
                title:
                  type: string
                  example: 'Coração delator'
                author_id:
                  type: integer
                  example: 1
                amount:
                  type: integer
                  example: 3
              type: object
      responses:
        2XX:
          description: OK
      security:
        -
          JWT: []
  '/api/books/{id}/activate':
    post:
      tags:
        - livro
      description: 'Reativação de livro'
      operationId: 5c950fcb2a8845e1aaa716d24bdad2d6
      parameters:
        -
          name: id
          in: path
          description: 'Id livro'
          required: true
          schema:
            type: integer
            example: 1
      responses:
        2XX:
          description: OK
      security:
        -
          JWT: []
  '/api/user/{id}':
    get:
      tags:
        - usuário
      description: 'Exibição de 1 usuário'
      operationId: d8f696420bea235f4916124c9ba1c507
      parameters:
        -
          name: id
          in: path
          description: 'Id usuário'
          required: true
          schema:
            type: integer
            example: 1
      responses:
        2XX:
          description: OK
      security:
        -
          JWT: []
  /api/users:
    get:
      tags:
        - usuário
      description: 'Listagem de usuários'
      operationId: c457726701591d1183b53aa71fc13441
      parameters:
        -
          name: name
          in: query
          description: 'Nome parcial do usuário'
          schema:
            type: string
            example: Allan
        -
          name: email
          in: query
          description: 'Email parcial do usuário'
          schema:
            type: string
            example: example@foo.com
        -
          name: cpf
          in: query
          description: 'CPF do usuário'
          schema:
            type: string
            example: '37128197060'
        -
          name: role
          in: query
          description: 'Papel do usuário'
          schema:
            type: string
            enum:
              - membro
              - colaborador
              - admin
        -
          name: page
          in: query
          description: Paginação
          schema:
            type: integer
            example: 1
      responses:
        2XX:
          description: OK
      security:
        -
          JWT: []
    post:
      tags:
        - usuário
      description: 'Cadastro de usuário'
      operationId: 592819a0265360b2014512d6dbfaf0e7
      requestBody:
        content:
          application/json;charset=UTF-8:
            schema:
              required:
                - name
                - cpf
                - password
                - email
              properties:
                name:
                  type: string
                  example: Diego
                cpf:
                  type: string
                  example: '37128197060'
                password:
                  type: string
                  example: '19800507'
                email:
                  type: string
                  example: example@foo.com
                role:
                  type: string
                  example: membro
              type: object
      responses:
        2XX:
          description: OK
      security:
        -
          JWT: []
components:
  securitySchemes:
    JWT:
      type: http
      scheme: bearer
externalDocs:
  description: 'Código fonte do projeto'
  url: 'https://github.com/nenitf/elefanteca_api'
